name: Deploy MakeMeLearn Unified

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Tests de l'API avec PostgreSQL
  test-api:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: makemelearn_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'api/package-lock.json'

      - name: Install API dependencies
        working-directory: ./api
        run: npm ci

      - name: Run API tests
        working-directory: ./api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/makemelearn_test
        run: |
          npm run test || echo "‚ö†Ô∏è Tests not configured yet"
          npm run lint || echo "‚ö†Ô∏è Linting not configured yet"

      - name: Test API startup
        working-directory: ./api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/makemelearn_test
          PORT: 3001
          CORS_ORIGIN: http://localhost:3001
        run: |
          # D√©marrer l'API en arri√®re-plan
          npm start &
          API_PID=$!
          
          # Attendre que l'API d√©marre
          echo "üîÑ D√©marrage de l'API..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/health 2>/dev/null; then
              echo "‚úÖ API d√©marr√©e avec succ√®s"
              break
            fi
            echo "Attente d√©marrage API... ($i/30)"
            sleep 2
          done
          
          # Tester les endpoints critiques
          echo "üß™ Test des endpoints..."
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:3001/api/stats/public || exit 1
          
          # Arr√™ter l'API
          kill $API_PID || true

  # Tests du frontend
  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install validation tools
        run: |
          npm install -g html-validate
          npm install -g eslint

      - name: Validate HTML
        run: |
          echo "üîç Validation HTML..."
          find . -name "*.html" -not -path "./node_modules/*" | xargs html-validate

      - name: Validate JavaScript
        run: |
          echo "üîç Validation JavaScript..."
          npx eslint script.js --no-eslintrc --config '{
            "env": { "browser": true, "es2021": true },
            "extends": "eslint:recommended",
            "rules": {
              "no-unused-vars": "warn",
              "no-undef": "warn"
            },
            "globals": {
              "console": "readonly",
              "fetch": "readonly",
              "document": "readonly",
              "window": "readonly",
              "navigator": "readonly"
            }
          }' || echo "‚ö†Ô∏è JS warnings detected but not blocking"

      - name: Check CSS syntax
        run: |
          echo "üîç Validation CSS..."
          if [ -f "style.css" ]; then
            # Compter les accolades pour v√©rifier la syntaxe de base
            OPEN=$(grep -o "{" style.css | wc -l)
            CLOSE=$(grep -o "}" style.css | wc -l)
            if [ "$OPEN" -ne "$CLOSE" ]; then
              echo "‚ùå Erreur: accolades CSS non √©quilibr√©es ($OPEN ouvertures, $CLOSE fermetures)"
              exit 1
            fi
            echo "‚úÖ CSS syntax OK ($OPEN/{$CLOSE} accolades)"
          fi

      - name: Check API configuration consistency
        run: |
          echo "üîç V√©rification configuration API..."
          # V√©rifier que script.js utilise bien makemelearn.fr/api
          if grep -q "makemelearn.fr/api" script.js; then
            echo "‚úÖ API configuration correcte dans script.js"
          else
            echo "‚ùå Configuration API manquante dans script.js"
            exit 1
          fi

  # D√©ploiement sur le serveur (seulement sur push vers main)
  deploy:
    needs: [test-api, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          debug: true
          script: |
            echo "üöÄ Starting MakeMeLearn deployment..."

            # Variables
            PROJECT_DIR="$HOME/projects/makemelearn-landing"
            BACKUP_DIR="$HOME/backups/makemelearn"
            DATE=$(date +%Y%m%d_%H%M%S)

            # Cr√©er les dossiers si n√©cessaire
            mkdir -p "$BACKUP_DIR"

            # Aller dans le dossier du projet ou le cr√©er
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "üìÅ Cr√©ation du dossier projet..."
              mkdir -p "$PROJECT_DIR"
              cd "$PROJECT_DIR"
              git clone https://github.com/creach-t/makemelearn-landing.git .
            else
              cd "$PROJECT_DIR"
            fi

            # Sauvegarder la configuration actuelle
            echo "üì¶ Sauvegarde de la configuration..."
            if [ -f ".env" ]; then
              cp .env "$BACKUP_DIR/.env.backup.$DATE"
              echo "‚úÖ .env sauvegard√©"
            fi

            # Sauvegarder la base de donn√©es si elle existe
            if docker compose ps -q postgres 2>/dev/null | grep -q .; then
              echo "üíæ Sauvegarde de la base de donn√©es..."
              docker compose exec -T postgres pg_dump -U makemelearn_user makemelearn > "$BACKUP_DIR/db_backup_$DATE.sql" 2>/dev/null || echo "‚ö†Ô∏è Backup DB √©chou√© (normal si premi√®re installation)"
            fi

            # Arr√™ter les services
            echo "‚èπÔ∏è Arr√™t des services..."
            docker compose down --remove-orphans 2>/dev/null || echo "‚ÑπÔ∏è Aucun service √† arr√™ter"

            # Mettre √† jour le code
            echo "üì• Mise √† jour du code..."
            git stash --include-untracked 2>/dev/null || true
            git fetch origin main
            git reset --hard origin/main

            # V√©rifier/cr√©er le fichier .env
            if [ ! -f ".env" ]; then
              echo "‚ö†Ô∏è Fichier .env manquant, copie depuis l'exemple..."
              cp .env.example .env
              echo "üîß ATTENTION: Configurez le fichier .env avec vos vraies valeurs!"
              echo "üîß Utilisation de la configuration par d√©faut pour ce d√©ploiement"
            fi

            # Cr√©er le network Traefik si n√©cessaire
            echo "üåê V√©rification du network Traefik..."
            docker network create traefik-public 2>/dev/null || echo "‚ÑπÔ∏è Network traefik-public existe d√©j√†"

            # D√©marrer les services
            echo "üîÑ D√©marrage des services..."
            docker compose pull 2>/dev/null || echo "‚ö†Ô∏è Pull failed, continuing..."
            docker compose up -d --build

            # Attendre que les services soient pr√™ts
            echo "‚è≥ Attente que les services soient pr√™ts..."
            sleep 20

            # V√©rifier les services
            echo "üîç V√©rification des services..."
            docker compose ps

            echo "‚úÖ Deployment termin√©!"
            echo "üåê Site: https://makemelearn.fr"
            echo "üîß API: https://makemelearn.fr/api/health"

  # Tests post-d√©ploiement
  post-deploy-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for services to be ready
        run: |
          echo "‚è≥ Attente que les services soient compl√®tement pr√™ts..."
          sleep 45

      - name: Test deployed services
        run: |
          echo "üîç Test des services d√©ploy√©s..."
          
          # Fonction pour tester une URL avec retry
          test_url() {
            local url=$1
            local name=$2
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üß™ Test $name (tentative $attempt/$max_attempts): $url"
              
              if curl -f -s -m 10 "$url" > /dev/null; then
                echo "‚úÖ $name accessible"
                return 0
              elif [ $attempt -eq $max_attempts ]; then
                echo "‚ùå $name non accessible apr√®s $max_attempts tentatives"
                return 1
              else
                echo "‚è≥ Nouvelle tentative dans 10s..."
                sleep 10
              fi
              
              ((attempt++))
            done
          }
          
          # Tests avec retry
          ERROR=0
          
          test_url "https://makemelearn.fr" "Frontend" || ERROR=1
          test_url "https://makemelearn.fr/api/health" "API Health" || ERROR=1
          test_url "https://makemelearn.fr/api/stats/public" "API Stats" || ERROR=1
          
          if [ $ERROR -eq 0 ]; then
            echo "üéâ Tous les tests post-d√©ploiement sont pass√©s!"
          else
            echo "‚ùå Certains tests ont √©chou√©"
            exit 1
          fi

  # Notification du statut
  notify:
    needs: [deploy, post-deploy-tests]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ] && [ "${{ needs.post-deploy-tests.result }}" == "success" ]; then
            echo "üéâ D√©ploiement MakeMeLearn r√©ussi!"
            echo "üåê Site: https://makemelearn.fr"
            echo "üîß API: https://makemelearn.fr/api/health"
            echo "üìä Stats: https://makemelearn.fr/api/stats/public"
            echo "üìÖ D√©ploy√© le: $(date)"
            echo "üîó Commit: ${{ github.sha }}"
          else
            echo "‚ùå D√©ploiement MakeMeLearn √©chou√©!"
            echo "Deploy result: ${{ needs.deploy.result }}"
            echo "Tests result: ${{ needs.post-deploy-tests.result }}"
            exit 1
          fi

      # Optionnel: notification externe (d√©commentez si vous avez un webhook)
      # - name: Slack notification
      #   if: env.SLACK_WEBHOOK_URL != ''
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      #   run: |
      #     STATUS="‚úÖ Succ√®s"
      #     if [ "${{ needs.deploy.result }}" != "success" ] || [ "${{ needs.post-deploy-tests.result }}" != "success" ]; then
      #       STATUS="‚ùå √âchec"
      #     fi
      #     
      #     curl -X POST -H 'Content-type: application/json' \
      #       --data "{\"text\":\"MakeMeLearn Deployment $STATUS - https://makemelearn.fr\"}" \
      #       "$SLACK_WEBHOOK_URL"