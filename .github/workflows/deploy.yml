name: Deploy MakeMeLearn Unified

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Tests de l'API avec PostgreSQL
  test-api:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: makemelearn_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup test database
        run: |
          echo "🗄️ Configuration de la base de données de test..."
          
          # Attendre que PostgreSQL soit prêt
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U test_user; then
              echo "✅ PostgreSQL prêt"
              break
            fi
            echo "Attente PostgreSQL... ($i/30)"
            sleep 2
          done
          
          # Créer les tables de test
          echo "📋 Création des tables de test..."
          PGPASSWORD=test_password psql -h localhost -p 5432 -U test_user -d makemelearn_test << 'EOF'
          -- Script d'initialisation simplifié pour les tests
          CREATE TABLE IF NOT EXISTS registrations (
              id SERIAL PRIMARY KEY,
              email VARCHAR(255) UNIQUE NOT NULL,
              source VARCHAR(100) DEFAULT 'website',
              metadata JSONB DEFAULT '{}',
              is_verified BOOLEAN DEFAULT false,
              verification_token VARCHAR(255),
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              unsubscribed_at TIMESTAMP WITH TIME ZONE DEFAULT NULL
          );

          CREATE TABLE IF NOT EXISTS stats (
              id SERIAL PRIMARY KEY,
              metric_name VARCHAR(100) NOT NULL,
              metric_value INTEGER DEFAULT 0,
              date DATE DEFAULT CURRENT_DATE,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              UNIQUE(metric_name, date)
          );

          -- Fonction pour incrémenter les statistiques
          CREATE OR REPLACE FUNCTION increment_stat(stat_name VARCHAR(100), increment_value INTEGER DEFAULT 1)
          RETURNS void AS $$
          BEGIN
              INSERT INTO stats (metric_name, metric_value, date)
              VALUES (stat_name, increment_value, CURRENT_DATE)
              ON CONFLICT (metric_name, date)
              DO UPDATE SET 
                  metric_value = stats.metric_value + increment_value,
                  created_at = CURRENT_TIMESTAMP;
          END;
          $$ language 'plpgsql';

          -- Insérer quelques données de test
          INSERT INTO stats (metric_name, metric_value, date) VALUES 
              ('page_views', 0, CURRENT_DATE),
              ('api_calls', 0, CURRENT_DATE),
              ('registrations', 0, CURRENT_DATE)
          ON CONFLICT (metric_name, date) DO NOTHING;

          SELECT 'Tables créées avec succès' as status;
          EOF
          
          echo "✅ Base de données de test configurée"

      - name: Install API dependencies
        working-directory: ./api
        run: |
          echo "📦 Installation des dépendances API..."
          npm install
          
          # Vérifier que les dépendances sont installées
          echo "✅ Dépendances installées:"
          npm list --depth=0 || echo "⚠️ Certaines dépendances peuvent être manquantes"

      - name: Run API tests
        working-directory: ./api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/makemelearn_test
        run: |
          echo "🧪 Exécution des tests API..."
          npm run test || echo "⚠️ Tests not configured yet - will be added later"
          npm run lint || echo "⚠️ Linting not configured yet - will be added later"

      - name: Test API startup and endpoints
        working-directory: ./api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/makemelearn_test
          PORT: 3001
          CORS_ORIGIN: http://localhost:3001
        run: |
          echo "🚀 Test de démarrage de l'API..."
          
          # Créer le dossier logs pour les tests
          mkdir -p logs
          chmod 755 logs
          
          # Démarrer l'API en arrière-plan
          npm start &
          API_PID=$!
          
          # Fonction pour nettoyer en cas d'erreur
          cleanup() {
            echo "🧹 Nettoyage..."
            kill $API_PID 2>/dev/null || true
            pkill -f "node.*server.js" 2>/dev/null || true
          }
          trap cleanup EXIT
          
          # Attendre que l'API démarre
          echo "🔄 Démarrage de l'API..."
          API_STARTED=false
          for i in {1..45}; do
            if curl -f -s http://localhost:3001/health >/dev/null 2>&1; then
              echo "✅ API démarrée avec succès (tentative $i)"
              API_STARTED=true
              break
            fi
            echo "Attente démarrage API... ($i/45)"
            sleep 2
          done
          
          if [ "$API_STARTED" = "true" ]; then
            # Tester les endpoints critiques
            echo "🧪 Test des endpoints..."
            
            # Test health check
            echo "Testing /health endpoint..."
            if curl -f -s http://localhost:3001/health; then
              echo "✅ Health check OK"
            else
              echo "❌ Health check failed"
              exit 1
            fi
            
            # Test stats endpoint (URL CORRIGÉE)
            echo "Testing /api/stats/public endpoint..."
            if curl -f -s http://localhost:3001/api/stats/public; then
              echo "✅ Stats endpoint OK"
            else
              echo "❌ Stats endpoint failed"
              exit 1
            fi
            
            # Test track endpoint
            echo "Testing /api/stats/track endpoint..."
            if curl -f -s -X POST http://localhost:3001/api/stats/track \
                -H "Content-Type: application/json" \
                -d '{"event":"test_event","value":1}'; then
              echo "✅ Track endpoint OK"
            else
              echo "⚠️ Track endpoint failed (non-blocking)"
            fi
            
            echo "🎉 Tous les tests d'endpoints sont passés!"
          else
            echo "❌ API n'a pas pu démarrer dans les temps"
            echo "📋 Logs de debug:"
            jobs
            exit 1
          fi

  # Tests du frontend
  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install validation tools
        run: |
          echo "📦 Installation des outils de validation..."
          npm install -g html-validate
          npm install -g eslint

      - name: Validate HTML
        run: |
          echo "🔍 Validation HTML..."
          find . -name "*.html" -not -path "./node_modules/*" -not -path "./api/node_modules/*" | xargs html-validate

      - name: Validate JavaScript
        run: |
          echo "🔍 Validation JavaScript..."
          npx eslint script.js --no-eslintrc --config '{
            "env": { "browser": true, "es2021": true },
            "extends": "eslint:recommended",
            "rules": {
              "no-unused-vars": "warn",
              "no-undef": "warn"
            },
            "globals": {
              "console": "readonly",
              "fetch": "readonly",
              "document": "readonly",
              "window": "readonly",
              "navigator": "readonly"
            }
          }' || echo "⚠️ JS warnings detected but not blocking"

      - name: Check CSS syntax
        run: |
          echo "🔍 Validation CSS..."
          if [ -f "style.css" ]; then
            # Compter les accolades pour vérifier la syntaxe de base
            OPEN=$(grep -o "{" style.css | wc -l)
            CLOSE=$(grep -o "}" style.css | wc -l)
            if [ "$OPEN" -ne "$CLOSE" ]; then
              echo "❌ Erreur: accolades CSS non équilibrées ($OPEN ouvertures, $CLOSE fermetures)"
              exit 1
            fi
            echo "✅ CSS syntax OK ($OPEN/{$CLOSE} accolades)"
          fi

      - name: Check API configuration consistency
        run: |
          echo "🔍 Vérification configuration API..."
          # Vérifier que script.js utilise bien makemelearn.fr/api
          if grep -q "makemelearn.fr/api" script.js; then
            echo "✅ API configuration correcte dans script.js"
          else
            echo "❌ Configuration API manquante dans script.js"
            exit 1
          fi

      - name: Check files structure
        run: |
          echo "🔍 Vérification de la structure des fichiers..."
          echo "📄 Fichiers HTML trouvés:"
          find . -name "*.html" -not -path "./node_modules/*" | head -10
          echo "📄 Fichiers CSS trouvés:"
          find . -name "*.css" -not -path "./node_modules/*"
          echo "📄 Fichiers JS trouvés:"
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./api/*"

  # Déploiement sur le serveur (seulement sur push vers main)
  deploy:
    needs: [test-api, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          debug: false
          script: |
            echo "🚀 Starting MakeMeLearn deployment..."

            # Variables
            PROJECT_DIR="$HOME/projects/makemelearn-landing"
            BACKUP_DIR="$HOME/backups/makemelearn"
            DATE=$(date +%Y%m%d_%H%M%S)

            # Créer les dossiers si nécessaire
            mkdir -p "$BACKUP_DIR"
            mkdir -p "$PROJECT_DIR/logs"  # AJOUT: Créer le dossier logs sur l'hôte

            # Aller dans le dossier du projet ou le créer
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "📁 Création du dossier projet..."
              mkdir -p ~/projects
              cd ~/projects
              git clone https://github.com/creach-t/makemelearn-landing.git
              cd makemelearn-landing
            else
              cd "$PROJECT_DIR"
            fi

            # Sauvegarder la configuration actuelle
            echo "📦 Sauvegarde de la configuration..."
            if [ -f ".env" ]; then
              cp .env "$BACKUP_DIR/.env.backup.$DATE"
              echo "✅ .env sauvegardé"
            fi

            # AJOUT: Sauvegarde des logs
            if [ -d "logs" ] && [ "$(ls -A logs)" ]; then
              echo "📋 Sauvegarde des logs..."
              tar -czf "$BACKUP_DIR/logs_backup_$DATE.tar.gz" logs/
              echo "✅ Logs sauvegardés"
            fi

            # Arrêter les services avec timeout
            echo "⏹️ Arrêt des services..."
            timeout 60 docker compose down --remove-orphans 2>/dev/null || {
              echo "⚠️ Arrêt forcé des containers..."
              docker compose kill 2>/dev/null || true
              docker compose rm -f 2>/dev/null || true
            }

            # Mettre à jour le code
            echo "📥 Mise à jour du code..."
            git stash --include-untracked 2>/dev/null || true
            git fetch origin main
            git reset --hard origin/main
            git clean -fd  # AJOUT: Nettoyer les fichiers non trackés

            # Vérifier/créer le fichier .env
            if [ ! -f ".env" ]; then
              echo "⚠️ Fichier .env manquant, copie depuis l'exemple..."
              cp .env.example .env
              echo "🔧 ATTENTION: Configurez le fichier .env avec vos vraies valeurs!"
            fi

            # Créer les dossiers nécessaires avec les bonnes permissions
            echo "📁 Création des dossiers nécessaires..."
            mkdir -p logs
            chmod 755 logs
            mkdir -p data  # Au cas où vous auriez des données persistantes

            # Créer le network Traefik si nécessaire
            echo "🌐 Vérification du network Traefik..."
            docker network create traefik-public 2>/dev/null || echo "ℹ️ Network traefik-public existe déjà"

            # Nettoyer les images obsolètes
            echo "🧹 Nettoyage des images obsolètes..."
            docker image prune -f --filter "until=24h" 2>/dev/null || true

            # Construire et démarrer les services
            echo "🏗️ Construction et démarrage des services..."
            docker compose pull 2>/dev/null || echo "⚠️ Pull failed, using cached images..."
            
            # Build avec no-cache pour l'API pour s'assurer que les changements sont pris en compte
            docker compose build --no-cache api
            docker compose build frontend  # Cache OK pour le frontend
            
            # Démarrer les services
            docker compose up -d

            # Attendre que les services soient prêts avec retry intelligent
            echo "⏳ Attente que les services soient prêts..."
            
            # Fonction de test avec retry
            test_service() {
              local service=$1
              local url=$2
              local max_attempts=30
              local attempt=1
              
              echo "🔄 Test du service $service..."
              while [ $attempt -le $max_attempts ]; do
                if curl -f -s -m 5 "$url" >/dev/null 2>&1; then
                  echo "✅ $service prêt (tentative $attempt)"
                  return 0
                fi
                echo "⏳ $service pas encore prêt (tentative $attempt/$max_attempts)..."
                sleep 2
                ((attempt++))
              done
              echo "❌ $service n'a pas démarré dans les temps"
              return 1
            }

            # Tester les services
            test_service "API" "http://localhost:3000/health" || {
              echo "❌ API failed to start"
              echo "📋 API Logs:"
              docker compose logs api --tail 50
              exit 1
            }

            # Vérifier les services
            echo "🔍 État final des services..."
            docker compose ps
            
            # Afficher les logs récents pour debug
            echo "📋 Logs récents de l'API:"
            docker compose logs api --tail 10

            echo "✅ Deployment terminé!"
            echo "🌐 Site: https://makemelearn.fr"
            echo "🔧 API: https://makemelearn.fr/api/health"

  # Tests post-déploiement
  post-deploy-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for services to be ready
        run: |
          echo "⏳ Attente que les services soient complètement prêts..."
          sleep 60

      - name: Test deployed services
        run: |
          echo "🔍 Test des services déployés..."
          
          # Fonction pour tester une URL avec retry
          test_url() {
            local url=$1
            local name=$2
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "🧪 Test $name (tentative $attempt/$max_attempts): $url"
              
              if curl -f -s -m 15 "$url" > /dev/null 2>&1; then
                echo "✅ $name accessible"
                return 0
              elif [ $attempt -eq $max_attempts ]; then
                echo "❌ $name non accessible après $max_attempts tentatives"
                return 1
              else
                echo "⏳ Nouvelle tentative dans 15s..."
                sleep 15
              fi
              
              ((attempt++))
            done
          }
          
          # Tests avec retry
          ERROR=0
          
          test_url "https://makemelearn.fr" "Frontend" || ERROR=1
          test_url "https://makemelearn.fr/api/health" "API Health" || ERROR=1
          test_url "https://makemelearn.fr/api/stats/public" "API Stats" || ERROR=1
          
          if [ $ERROR -eq 0 ]; then
            echo "🎉 Tous les tests post-déploiement sont passés!"
            echo "🌐 Frontend: https://makemelearn.fr"
            echo "🔧 API Health: https://makemelearn.fr/api/health"
            echo "📊 API Stats: https://makemelearn.fr/api/stats/public"
          else
            echo "❌ Certains tests ont échoué"
            # Mais ne pas faire échouer le déploiement pour des problèmes de timing
            echo "⚠️ Cela peut être dû à des délais de démarrage - vérifiez manuellement"
          fi

  # Notification du statut
  notify:
    needs: [deploy, post-deploy-tests]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 Déploiement MakeMeLearn réussi!"
            echo ""
            echo "📊 RÉSULTATS DU DÉPLOIEMENT"
            echo "=========================="
            echo "🌐 Site principal: https://makemelearn.fr"
            echo "🔧 API Health: https://makemelearn.fr/api/health"
            echo "📊 API Stats: https://makemelearn.fr/api/stats/public"
            echo "📅 Déployé le: $(date)"
            echo "🔗 Commit: ${{ github.sha }}"
            echo "✅ Tests post-déploiement: ${{ needs.post-deploy-tests.result }}"
            echo ""
            echo "🔄 Prochaines étapes:"
            echo "- Vérifiez que le site fonctionne"
            echo "- Configurez votre fichier .env sur le serveur"
            echo "- Testez l'inscription sur votre site"
          else
            echo "❌ Déploiement MakeMeLearn échoué!"
            echo "Deploy result: ${{ needs.deploy.result }}"
            echo "Tests result: ${{ needs.post-deploy-tests.result }}"
            echo ""
            echo "🔍 Vérifiez les logs des étapes précédentes"
            exit 1
          fi