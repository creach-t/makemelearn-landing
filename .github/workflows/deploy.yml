name: Deploy MakeMeLearn Unified

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Tests de l'API avec PostgreSQL
  test-api:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: makemelearn_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # Pas de cache pour le moment, on va le réactiver après

      - name: Install API dependencies
        working-directory: ./api
        run: |
          echo "📦 Installation des dépendances API..."
          # Utiliser npm install pour générer un package-lock.json valide
          npm install
          
          # Vérifier que les dépendances sont installées
          echo "✅ Dépendances installées:"
          npm list --depth=0

      - name: Run API tests
        working-directory: ./api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/makemelearn_test
        run: |
          echo "🧪 Exécution des tests API..."
          npm run test || echo "⚠️ Tests not configured yet - will be added later"
          npm run lint || echo "⚠️ Linting not configured yet - will be added later"

      - name: Test API startup
        working-directory: ./api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/makemelearn_test
          PORT: 3001
          CORS_ORIGIN: http://localhost:3001
        run: |
          echo "🚀 Test de démarrage de l'API..."
          
          # Démarrer l'API en arrière-plan
          npm start &
          API_PID=$!
          
          # Attendre que l'API démarre
          echo "🔄 Démarrage de l'API..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/health 2>/dev/null; then
              echo "✅ API démarrée avec succès"
              API_STARTED=true
              break
            fi
            echo "Attente démarrage API... ($i/30)"
            sleep 2
          done
          
          if [ "$API_STARTED" = "true" ]; then
            # Tester les endpoints critiques
            echo "🧪 Test des endpoints..."
            curl -f http://localhost:3001/health || exit 1
            echo "✅ Health check OK"
            
            curl -f http://localhost:3001/api/stats/public || exit 1
            echo "✅ Stats endpoint OK"
          else
            echo "❌ API n'a pas pu démarrer"
            # Afficher les logs pour debug
            echo "📋 Logs de l'API:"
            jobs
            exit 1
          fi
          
          # Arrêter l'API
          kill $API_PID || true
          echo "🛑 API arrêtée"

  # Tests du frontend
  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install validation tools
        run: |
          echo "📦 Installation des outils de validation..."
          npm install -g html-validate
          npm install -g eslint

      - name: Validate HTML
        run: |
          echo "🔍 Validation HTML..."
          find . -name "*.html" -not -path "./node_modules/*" -not -path "./api/node_modules/*" | xargs html-validate

      - name: Validate JavaScript
        run: |
          echo "🔍 Validation JavaScript..."
          npx eslint script.js --no-eslintrc --config '{
            "env": { "browser": true, "es2021": true },
            "extends": "eslint:recommended",
            "rules": {
              "no-unused-vars": "warn",
              "no-undef": "warn"
            },
            "globals": {
              "console": "readonly",
              "fetch": "readonly",
              "document": "readonly",
              "window": "readonly",
              "navigator": "readonly"
            }
          }' || echo "⚠️ JS warnings detected but not blocking"

      - name: Check CSS syntax
        run: |
          echo "🔍 Validation CSS..."
          if [ -f "style.css" ]; then
            # Compter les accolades pour vérifier la syntaxe de base
            OPEN=$(grep -o "{" style.css | wc -l)
            CLOSE=$(grep -o "}" style.css | wc -l)
            if [ "$OPEN" -ne "$CLOSE" ]; then
              echo "❌ Erreur: accolades CSS non équilibrées ($OPEN ouvertures, $CLOSE fermetures)"
              exit 1
            fi
            echo "✅ CSS syntax OK ($OPEN/{$CLOSE} accolades)"
          fi

      - name: Check API configuration consistency
        run: |
          echo "🔍 Vérification configuration API..."
          # Vérifier que script.js utilise bien makemelearn.fr/api
          if grep -q "makemelearn.fr/api" script.js; then
            echo "✅ API configuration correcte dans script.js"
          else
            echo "❌ Configuration API manquante dans script.js"
            exit 1
          fi

      - name: Check files structure
        run: |
          echo "🔍 Vérification de la structure des fichiers..."
          echo "📄 Fichiers HTML trouvés:"
          find . -name "*.html" -not -path "./node_modules/*" | head -10
          echo "📄 Fichiers CSS trouvés:"
          find . -name "*.css" -not -path "./node_modules/*"
          echo "📄 Fichiers JS trouvés:"
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./api/*"

  # Déploiement sur le serveur (seulement sur push vers main)
  deploy:
    needs: [test-api, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          debug: false
          script: |
            echo "🚀 Starting MakeMeLearn deployment..."

            # Variables
            PROJECT_DIR="$HOME/projects/makemelearn-landing"
            BACKUP_DIR="$HOME/backups/makemelearn"
            DATE=$(date +%Y%m%d_%H%M%S)

            # Créer les dossiers si nécessaire
            mkdir -p "$BACKUP_DIR"

            # Aller dans le dossier du projet ou le créer
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "📁 Création du dossier projet..."
              mkdir -p ~/projects
              cd ~/projects
              git clone https://github.com/creach-t/makemelearn-landing.git
              cd makemelearn-landing
            else
              cd "$PROJECT_DIR"
            fi

            # Sauvegarder la configuration actuelle
            echo "📦 Sauvegarde de la configuration..."
            if [ -f ".env" ]; then
              cp .env "$BACKUP_DIR/.env.backup.$DATE"
              echo "✅ .env sauvegardé"
            fi

            # Sauvegarder la base de données si elle existe
            if docker compose ps -q postgres 2>/dev/null | grep -q .; then
              echo "💾 Sauvegarde de la base de données..."
              docker compose exec -T postgres pg_dump -U makemelearn_user makemelearn > "$BACKUP_DIR/db_backup_$DATE.sql" 2>/dev/null || echo "⚠️ Backup DB échoué (normal si première installation)"
            fi

            # Arrêter les services
            echo "⏹️ Arrêt des services..."
            docker compose down --remove-orphans 2>/dev/null || echo "ℹ️ Aucun service à arrêter"

            # Mettre à jour le code
            echo "📥 Mise à jour du code..."
            git stash --include-untracked 2>/dev/null || true
            git fetch origin main
            git reset --hard origin/main

            # Vérifier/créer le fichier .env
            if [ ! -f ".env" ]; then
              echo "⚠️ Fichier .env manquant, copie depuis l'exemple..."
              cp .env.example .env
              echo "🔧 ATTENTION: Configurez le fichier .env avec vos vraies valeurs!"
              echo "🔧 Utilisation de la configuration par défaut pour ce déploiement"
            fi

            # Créer le network Traefik si nécessaire
            echo "🌐 Vérification du network Traefik..."
            docker network create traefik-public 2>/dev/null || echo "ℹ️ Network traefik-public existe déjà"

            # Démarrer les services
            echo "🔄 Démarrage des services..."
            docker compose pull 2>/dev/null || echo "⚠️ Pull failed, continuing..."
            docker compose up -d --build

            # Attendre que les services soient prêts
            echo "⏳ Attente que les services soient prêts..."
            sleep 30

            # Vérifier les services
            echo "🔍 Vérification des services..."
            docker compose ps

            echo "✅ Deployment terminé!"
            echo "🌐 Site: https://makemelearn.fr"
            echo "🔧 API: https://makemelearn.fr/api/health"

  # Tests post-déploiement
  post-deploy-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for services to be ready
        run: |
          echo "⏳ Attente que les services soient complètement prêts..."
          sleep 60

      - name: Test deployed services
        run: |
          echo "🔍 Test des services déployés..."
          
          # Fonction pour tester une URL avec retry
          test_url() {
            local url=$1
            local name=$2
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "🧪 Test $name (tentative $attempt/$max_attempts): $url"
              
              if curl -f -s -m 15 "$url" > /dev/null 2>&1; then
                echo "✅ $name accessible"
                return 0
              elif [ $attempt -eq $max_attempts ]; then
                echo "❌ $name non accessible après $max_attempts tentatives"
                return 1
              else
                echo "⏳ Nouvelle tentative dans 15s..."
                sleep 15
              fi
              
              ((attempt++))
            done
          }
          
          # Tests avec retry
          ERROR=0
          
          test_url "https://makemelearn.fr" "Frontend" || ERROR=1
          test_url "https://makemelearn.fr/api/health" "API Health" || ERROR=1
          test_url "https://makemelearn.fr/api/stats/public" "API Stats" || ERROR=1
          
          if [ $ERROR -eq 0 ]; then
            echo "🎉 Tous les tests post-déploiement sont passés!"
            echo "🌐 Frontend: https://makemelearn.fr"
            echo "🔧 API Health: https://makemelearn.fr/api/health"
            echo "📊 API Stats: https://makemelearn.fr/api/stats/public"
          else
            echo "❌ Certains tests ont échoué"
            # Mais ne pas faire échouer le déploiement pour des problèmes de timing
            echo "⚠️ Cela peut être dû à des délais de démarrage - vérifiez manuellement"
          fi

  # Notification du statut
  notify:
    needs: [deploy, post-deploy-tests]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 Déploiement MakeMeLearn réussi!"
            echo ""
            echo "📊 RÉSULTATS DU DÉPLOIEMENT"
            echo "=========================="
            echo "🌐 Site principal: https://makemelearn.fr"
            echo "🔧 API Health: https://makemelearn.fr/api/health"
            echo "📊 API Stats: https://makemelearn.fr/api/stats/public"
            echo "📅 Déployé le: $(date)"
            echo "🔗 Commit: ${{ github.sha }}"
            echo "✅ Tests post-déploiement: ${{ needs.post-deploy-tests.result }}"
            echo ""
            echo "🔄 Prochaines étapes:"
            echo "- Vérifiez que le site fonctionne"
            echo "- Configurez votre fichier .env sur le serveur"
            echo "- Testez l'inscription sur votre site"
          else
            echo "❌ Déploiement MakeMeLearn échoué!"
            echo "Deploy result: ${{ needs.deploy.result }}"
            echo "Tests result: ${{ needs.post-deploy-tests.result }}"
            echo ""
            echo "🔍 Vérifiez les logs des étapes précédentes"
            exit 1
          fi