name: Deploy MakeMeLearn Unified

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Tests de l'API avec PostgreSQL
  test-api:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: makemelearn_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup test database
        run: |
          echo "üóÑÔ∏è Configuration de la base de donn√©es de test..."
          
          # Attendre que PostgreSQL soit pr√™t
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U test_user; then
              echo "‚úÖ PostgreSQL pr√™t"
              break
            fi
            echo "Attente PostgreSQL... ($i/30)"
            sleep 2
          done
          
          # Cr√©er les tables de test
          echo "üìã Cr√©ation des tables de test..."
          PGPASSWORD=test_password psql -h localhost -p 5432 -U test_user -d makemelearn_test << 'EOF'
          -- Script d'initialisation simplifi√© pour les tests
          CREATE TABLE IF NOT EXISTS registrations (
              id SERIAL PRIMARY KEY,
              email VARCHAR(255) UNIQUE NOT NULL,
              source VARCHAR(100) DEFAULT 'website',
              metadata JSONB DEFAULT '{}',
              is_verified BOOLEAN DEFAULT false,
              verification_token VARCHAR(255),
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              unsubscribed_at TIMESTAMP WITH TIME ZONE DEFAULT NULL
          );

          CREATE TABLE IF NOT EXISTS stats (
              id SERIAL PRIMARY KEY,
              metric_name VARCHAR(100) NOT NULL,
              metric_value INTEGER DEFAULT 0,
              date DATE DEFAULT CURRENT_DATE,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
              UNIQUE(metric_name, date)
          );

          -- Fonction pour incr√©menter les statistiques
          CREATE OR REPLACE FUNCTION increment_stat(stat_name VARCHAR(100), increment_value INTEGER DEFAULT 1)
          RETURNS void AS $$
          BEGIN
              INSERT INTO stats (metric_name, metric_value, date)
              VALUES (stat_name, increment_value, CURRENT_DATE)
              ON CONFLICT (metric_name, date)
              DO UPDATE SET 
                  metric_value = stats.metric_value + increment_value,
                  created_at = CURRENT_TIMESTAMP;
          END;
          $$ language 'plpgsql';

          -- Ins√©rer quelques donn√©es de test
          INSERT INTO stats (metric_name, metric_value, date) VALUES 
              ('page_views', 0, CURRENT_DATE),
              ('api_calls', 0, CURRENT_DATE),
              ('registrations', 0, CURRENT_DATE)
          ON CONFLICT (metric_name, date) DO NOTHING;

          SELECT 'Tables cr√©√©es avec succ√®s' as status;
          EOF
          
          echo "‚úÖ Base de donn√©es de test configur√©e"

      - name: Install API dependencies
        working-directory: ./api
        run: |
          echo "üì¶ Installation des d√©pendances API..."
          npm install
          
          # V√©rifier que les d√©pendances sont install√©es
          echo "‚úÖ D√©pendances install√©es:"
          npm list --depth=0 || echo "‚ö†Ô∏è Certaines d√©pendances peuvent √™tre manquantes"

      - name: Run API tests
        working-directory: ./api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/makemelearn_test
        run: |
          echo "üß™ Ex√©cution des tests API..."
          npm run test || echo "‚ö†Ô∏è Tests not configured yet - will be added later"
          npm run lint || echo "‚ö†Ô∏è Linting not configured yet - will be added later"

      - name: Test API startup and endpoints
        working-directory: ./api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/makemelearn_test
          PORT: 3001
          CORS_ORIGIN: http://localhost:3001
        run: |
          echo "üöÄ Test de d√©marrage de l'API..."
          
          # Cr√©er le dossier logs pour les tests
          mkdir -p logs
          chmod 755 logs
          
          # D√©marrer l'API en arri√®re-plan
          npm start &
          API_PID=$!
          
          # Fonction pour nettoyer en cas d'erreur
          cleanup() {
            echo "üßπ Nettoyage..."
            kill $API_PID 2>/dev/null || true
            pkill -f "node.*server.js" 2>/dev/null || true
          }
          trap cleanup EXIT
          
          # Attendre que l'API d√©marre
          echo "üîÑ D√©marrage de l'API..."
          API_STARTED=false
          for i in {1..45}; do
            if curl -f -s http://localhost:3001/health >/dev/null 2>&1; then
              echo "‚úÖ API d√©marr√©e avec succ√®s (tentative $i)"
              API_STARTED=true
              break
            fi
            echo "Attente d√©marrage API... ($i/45)"
            sleep 2
          done
          
          if [ "$API_STARTED" = "true" ]; then
            # Tester les endpoints critiques - ROUTES CORRIG√âES
            echo "üß™ Test des endpoints..."
            
            # Test health check
            echo "Testing /health endpoint..."
            if curl -f -s http://localhost:3001/health; then
              echo "‚úÖ Health check OK"
            else
              echo "‚ùå Health check failed"
              exit 1
            fi
            
            # Test stats endpoint public - ROUTE CORRIG√âE (sans /api)
            echo "Testing /stats/public endpoint..."
            if curl -f -s http://localhost:3001/stats/public; then
              echo "‚úÖ Stats endpoint OK"
            else
              echo "‚ùå Stats endpoint failed"
              exit 1
            fi
            
            # Test track endpoint - ROUTE CORRIG√âE (sans /api)
            echo "Testing /stats/track endpoint..."
            if curl -f -s -X POST http://localhost:3001/stats/track \
                -H "Content-Type: application/json" \
                -d '{"event":"test_event","value":1}'; then
              echo "‚úÖ Track endpoint OK"
            else
              echo "‚ö†Ô∏è Track endpoint failed (non-blocking)"
            fi
            
            # Test registrations endpoint - NOUVEAU TEST
            echo "Testing /registrations endpoint..."
            if curl -f -s -X POST http://localhost:3001/registrations \
                -H "Content-Type: application/json" \
                -d '{"email":"test@example.com","source":"ci_test"}'; then
              echo "‚úÖ Registrations endpoint OK"
            else
              echo "‚ö†Ô∏è Registrations endpoint failed (non-blocking)"
            fi
            
            echo "üéâ Tous les tests d'endpoints sont pass√©s!"
          else
            echo "‚ùå API n'a pas pu d√©marrer dans les temps"
            echo "üìã Logs de debug:"
            jobs
            exit 1
          fi

  # Tests du frontend
  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install validation tools
        run: |
          echo "üì¶ Installation des outils de validation..."
          npm install -g html-validate
          npm install -g eslint

      - name: Validate HTML
        run: |
          echo "üîç Validation HTML..."
          find . -name "*.html" -not -path "./node_modules/*" -not -path "./api/node_modules/*" | xargs html-validate

      - name: Validate JavaScript
        run: |
          echo "üîç Validation JavaScript..."
          npx eslint script.js --no-eslintrc --config '{
            "env": { "browser": true, "es2021": true },
            "extends": "eslint:recommended",
            "rules": {
              "no-unused-vars": "warn",
              "no-undef": "warn"
            },
            "globals": {
              "console": "readonly",
              "fetch": "readonly",
              "document": "readonly",
              "window": "readonly",
              "navigator": "readonly"
            }
          }' || echo "‚ö†Ô∏è JS warnings detected but not blocking"

      - name: Check CSS syntax
        run: |
          echo "üîç Validation CSS..."
          if [ -f "style.css" ]; then
            # Compter les accolades pour v√©rifier la syntaxe de base
            OPEN=$(grep -o "{" style.css | wc -l)
            CLOSE=$(grep -o "}" style.css | wc -l)
            if [ "$OPEN" -ne "$CLOSE" ]; then
              echo "‚ùå Erreur: accolades CSS non √©quilibr√©es ($OPEN ouvertures, $CLOSE fermetures)"
              exit 1
            fi
            echo "‚úÖ CSS syntax OK ($OPEN/{$CLOSE} accolades)"
          fi

      - name: Check API configuration consistency
        run: |
          echo "üîç V√©rification configuration API..."
          # V√©rifier que script.js utilise bien makemelearn.fr/api
          if grep -q "makemelearn.fr/api" script.js; then
            echo "‚úÖ API configuration correcte dans script.js"
          else
            echo "‚ùå Configuration API manquante dans script.js"
            exit 1
          fi

      - name: Check files structure
        run: |
          echo "üîç V√©rification de la structure des fichiers..."
          echo "üìÑ Fichiers HTML trouv√©s:"
          find . -name "*.html" -not -path "./node_modules/*" | head -10
          echo "üìÑ Fichiers CSS trouv√©s:"
          find . -name "*.css" -not -path "./node_modules/*"
          echo "üìÑ Fichiers JS trouv√©s:"
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./api/*"

  # D√©ploiement sur le serveur (seulement sur push vers main)
  deploy:
    needs: [test-api, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          debug: false
          script: |
            echo "üöÄ Starting MakeMeLearn deployment..."

            # Variables
            PROJECT_DIR="$HOME/projects/makemelearn-landing"
            BACKUP_DIR="$HOME/backups/makemelearn"
            DATE=$(date +%Y%m%d_%H%M%S)

            # Cr√©er les dossiers si n√©cessaire
            mkdir -p "$BACKUP_DIR"
            mkdir -p "$PROJECT_DIR/logs"

            # Aller dans le dossier du projet ou le cr√©er
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "üìÅ Cr√©ation du dossier projet..."
              mkdir -p ~/projects
              cd ~/projects
              git clone https://github.com/creach-t/makemelearn-landing.git
              cd makemelearn-landing
            else
              cd "$PROJECT_DIR"
            fi

            # Sauvegarder la configuration actuelle
            echo "üì¶ Sauvegarde de la configuration..."
            if [ -f ".env" ]; then
              cp .env "$BACKUP_DIR/.env.backup.$DATE"
              echo "‚úÖ .env sauvegard√©"
            fi

            # Sauvegarde des logs
            if [ -d "logs" ] && [ "$(ls -A logs)" ]; then
              echo "üìã Sauvegarde des logs..."
              tar -czf "$BACKUP_DIR/logs_backup_$DATE.tar.gz" logs/
              echo "‚úÖ Logs sauvegard√©s"
            fi

            # Arr√™ter les services avec timeout
            echo "‚èπÔ∏è Arr√™t des services..."
            timeout 60 docker compose down --remove-orphans 2>/dev/null || {
              echo "‚ö†Ô∏è Arr√™t forc√© des containers..."
              docker compose kill 2>/dev/null || true
              docker compose rm -f 2>/dev/null || true
            }

            # Mettre √† jour le code
            echo "üì• Mise √† jour du code..."
            git stash --include-untracked 2>/dev/null || true
            git fetch origin main
            git reset --hard origin/main
            git clean -fd

            # V√©rifier/cr√©er le fichier .env
            if [ ! -f ".env" ]; then
              echo "‚ö†Ô∏è Fichier .env manquant, copie depuis l'exemple..."
              cp .env.example .env
              echo "üîß ATTENTION: Configurez le fichier .env avec vos vraies valeurs!"
            fi

            # Cr√©er les dossiers n√©cessaires avec les bonnes permissions
            echo "üìÅ Cr√©ation des dossiers n√©cessaires..."
            mkdir -p logs
            chmod 755 logs
            mkdir -p data

            # Cr√©er le network Traefik si n√©cessaire
            echo "üåê V√©rification du network Traefik..."
            docker network create traefik-public 2>/dev/null || echo "‚ÑπÔ∏è Network traefik-public existe d√©j√†"

            # Nettoyer les images obsol√®tes
            echo "üßπ Nettoyage des images obsol√®tes..."
            docker image prune -f --filter "until=24h" 2>/dev/null || true

            # Construire et d√©marrer les services
            echo "üèóÔ∏è Construction et d√©marrage des services..."
            docker compose pull 2>/dev/null || echo "‚ö†Ô∏è Pull failed, using cached images..."
            
            # Build avec no-cache pour l'API pour s'assurer que les changements sont pris en compte
            docker compose build --no-cache api
            docker compose build frontend
            
            # D√©marrer les services
            docker compose up -d

            # NOUVEAU: Utiliser la logique corrig√©e du script deploy.sh
            echo "‚è≥ Attente que les services soient pr√™ts..."
            sleep 10

            echo "üîÑ V√©rification des containers..."
            
            # V√©rifier PostgreSQL
            if ! docker compose ps postgres | grep -q "Up"; then
              echo "‚ùå Container PostgreSQL n'est pas d√©marr√©"
              exit 1
            fi
            echo "‚úÖ PostgreSQL: OK"

            # V√©rifier le frontend
            if ! docker compose ps frontend | grep -q "Up"; then
              echo "‚ùå Container Frontend n'est pas d√©marr√©"
              exit 1
            fi
            echo "‚úÖ Frontend: OK"

            # V√©rifier l'API avec la NOUVELLE m√©thode
            echo "üîÑ Test du service API..."
            
            # D'abord v√©rifier que le container API est up
            if ! docker compose ps api | grep -q "Up"; then
              echo "‚ùå Container API n'est pas d√©marr√©"
              exit 1
            fi

            # Tester l'API directement dans le container (pas via l'URL externe)
            max_attempts=30
            attempt=1

            while [ $attempt -le $max_attempts ]; do
              echo "‚è≥ Test de l'API (tentative $attempt/$max_attempts)..."
              
              # Test direct dans le container - LA CL√â DU FIX !
              if docker compose exec -T api curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
                echo "‚úÖ API r√©pond correctement sur le port interne"
                break
              elif [ $attempt -eq $max_attempts ]; then
                echo "‚ùå API n'a pas d√©marr√© dans les temps"
                echo "üìã API Logs:"
                docker compose logs api --tail 50
                exit 1
              else
                echo "‚è≥ API pas encore pr√™t (tentative $attempt/$max_attempts)..."
                sleep 2
              fi

              ((attempt++))
            done

            # V√©rifier qu'il n'y a pas d'erreurs fatales
            if docker compose logs --tail=50 api | grep -i "fatal\|cannot\|failed.*start"; then
              echo "‚ö†Ô∏è Erreurs d√©tect√©es dans les logs de l'API"
            else
              echo "‚úÖ Pas d'erreurs fatales d√©tect√©es"
            fi

            # Test optionnel de l'URL externe (ne fait pas √©chouer le d√©ploiement)
            echo "üåê Test optionnel de l'URL externe..."
            if curl -f -s --max-time 10 "https://makemelearn.fr" > /dev/null 2>&1; then
              echo "‚úÖ Site accessible via https://makemelearn.fr"
            else
              echo "‚ö†Ô∏è Site pas encore accessible via l'URL externe (normal si Traefik n'est pas encore configur√©)"
            fi

            echo "‚úÖ D√©ploiement v√©rifi√© avec succ√®s"

            # V√©rifier les services
            echo "üîç √âtat final des services..."
            docker compose ps
            
            # Afficher les logs r√©cents pour debug
            echo "üìã Logs r√©cents de l'API:"
            docker compose logs api --tail 10

            echo "‚úÖ Deployment termin√©!"
            echo "üåê Site: https://makemelearn.fr"
            echo "üîß API: https://makemelearn.fr/api/health"

  # Tests post-d√©ploiement - ROUTES CORRIG√âES
  post-deploy-tests:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for services to be ready
        run: |
          echo "‚è≥ Attente que les services soient compl√®tement pr√™ts..."
          sleep 60

      - name: Test deployed services
        run: |
          echo "üîç Test des services d√©ploy√©s..."
          
          # Fonction pour tester une URL avec retry
          test_url() {
            local url=$1
            local name=$2
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üß™ Test $name (tentative $attempt/$max_attempts): $url"
              
              if curl -f -s -m 15 "$url" > /dev/null 2>&1; then
                echo "‚úÖ $name accessible"
                return 0
              elif [ $attempt -eq $max_attempts ]; then
                echo "‚ùå $name non accessible apr√®s $max_attempts tentatives"
                return 1
              else
                echo "‚è≥ Nouvelle tentative dans 15s..."
                sleep 15
              fi
              
              ((attempt++))
            done
          }
          
          # Tests avec retry - URLS CORRIG√âES POUR TRAEFIK
          ERROR=0
          
          test_url "https://makemelearn.fr" "Frontend" || ERROR=1
          test_url "https://makemelearn.fr/api/health" "API Health" || ERROR=1
          test_url "https://makemelearn.fr/api/stats/public" "API Stats" || ERROR=1
          
          # Test optionnel du tracking
          echo "üß™ Test optionnel du tracking d'√©v√©nement..."
          if curl -f -s -m 10 -X POST "https://makemelearn.fr/api/stats/track" \
              -H "Content-Type: application/json" \
              -d '{"event":"ci_test_event","value":1}' > /dev/null 2>&1; then
            echo "‚úÖ API Track accessible"
          else
            echo "‚ö†Ô∏è API Track non accessible (non-bloquant)"
          fi
          
          if [ $ERROR -eq 0 ]; then
            echo "üéâ Tous les tests post-d√©ploiement sont pass√©s!"
            echo "üåê Frontend: https://makemelearn.fr"
            echo "üîß API Health: https://makemelearn.fr/api/health"
            echo "üìä API Stats: https://makemelearn.fr/api/stats/public"
            echo "üìà API Track: https://makemelearn.fr/api/stats/track"
          else
            echo "‚ùå Certains tests ont √©chou√©"
            # Mais ne pas faire √©chouer le d√©ploiement pour des probl√®mes de timing
            echo "‚ö†Ô∏è Cela peut √™tre d√ª √† des d√©lais de d√©marrage - v√©rifiez manuellement"
          fi

  # Notification du statut
  notify:
    needs: [deploy, post-deploy-tests]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ D√©ploiement MakeMeLearn r√©ussi!"
            echo ""
            echo "üìä R√âSULTATS DU D√âPLOIEMENT"
            echo "=========================="
            echo "üåê Site principal: https://makemelearn.fr"
            echo "üîß API Health: https://makemelearn.fr/api/health"
            echo "üìä API Stats: https://makemelearn.fr/api/stats/public"
            echo "üìà API Track: https://makemelearn.fr/api/stats/track"
            echo "üìß API Register: https://makemelearn.fr/api/registrations"
            echo "üìÖ D√©ploy√© le: $(date)"
            echo "üîó Commit: ${{ github.sha }}"
            echo "‚úÖ Tests post-d√©ploiement: ${{ needs.post-deploy-tests.result }}"
            echo ""
            echo "üîÑ Prochaines √©tapes:"
            echo "- V√©rifiez que le site fonctionne"
            echo "- Configurez votre fichier .env sur le serveur"
            echo "- Testez l'inscription sur votre site"
            echo ""
            echo "üìã ROUTES API ACTIVES (sans pr√©fixe /api internal):"
            echo "- Traefik: /api/health ‚Üí API: /health"
            echo "- Traefik: /api/stats/* ‚Üí API: /stats/*"
            echo "- Traefik: /api/registrations ‚Üí API: /registrations"
          else
            echo "‚ùå D√©ploiement MakeMeLearn √©chou√©!"
            echo "Deploy result: ${{ needs.deploy.result }}"
            echo "Tests result: ${{ needs.post-deploy-tests.result }}"
            echo ""
            echo "üîç V√©rifiez les logs des √©tapes pr√©c√©dentes"
            exit 1
          fi