/**\n * App JavaScript modulaire\n * Point d'entr√©e principal pour l'application\n */\n\nimport { HeaderComponent } from './components/header.js';\nimport { FooterComponent } from './components/footer.js';\nimport { FormComponent } from './components/form.js';\nimport { componentLoader } from './components/loader.js';\n\nclass App {\n    constructor() {\n        this.components = {\n            header: null,\n            footer: null,\n            forms: new Map()\n        };\n        \n        this.init();\n    }\n\n    async init() {\n        try {\n            // Enregistrer les composants\n            this.registerComponents();\n            \n            // Charger les composants de base\n            await this.loadBaseComponents();\n            \n            // Initialiser la page sp√©cifique\n            this.initPageSpecific();\n            \n            // Attacher les √©v√©nements globaux\n            this.attachGlobalEventListeners();\n            \n            console.log('‚úÖ MakeMeLearn - Application initialis√©e');\n        } catch (error) {\n            console.error('‚ùå Erreur lors de l\\'initialisation:', error);\n        }\n    }\n\n    registerComponents() {\n        componentLoader.register('header', HeaderComponent);\n        componentLoader.register('footer', FooterComponent);\n        componentLoader.register('form', FormComponent);\n    }\n\n    async loadBaseComponents() {\n        // Charger header et footer sur toutes les pages\n        this.components.header = await componentLoader.load('header', 'header-component');\n        this.components.footer = await componentLoader.load('footer', 'footer-component');\n    }\n\n    initPageSpecific() {\n        const currentPage = this.getCurrentPage();\n        \n        switch (currentPage) {\n            case 'index.html':\n            case '':\n                this.initHomePage();\n                break;\n            case 'contact.html':\n                this.initContactPage();\n                break;\n            case 'faq.html':\n                this.initFaqPage();\n                break;\n            case 'how-it-works.html':\n                this.initHowItWorksPage();\n                break;\n            case 'about.html':\n                this.initAboutPage();\n                break;\n            default:\n                console.log(`Page sp√©cifique non configur√©e: ${currentPage}`);\n        }\n    }\n\n    getCurrentPage() {\n        const path = window.location.pathname;\n        return path.split('/').pop() || 'index.html';\n    }\n\n    initHomePage() {\n        console.log('üè† Initialisation de la page d\\'accueil');\n        \n        // Formulaire d'inscription newsletter\n        const signupConfig = {\n            id: 'signupForm',\n            className: 'signup-form',\n            fields: [\n                {\n                    type: 'email',\n                    id: 'emailInput',\n                    name: 'email',\n                    placeholder: 'Votre adresse email',\n                    required: true,\n                    grouped: true\n                }\n            ],\n            submitButton: {\n                text: 'Rejoindre les pionniers',\n                loadingText: 'Inscription en cours...',\n                successText: 'Inscription confirm√©e !',\n                className: 'btn btn-primary',\n                icon: '<path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.293l-3-3a1 1 0 00-1.414 1.414L10.586 9.5 9.293 10.793a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z\" clip-rule=\"evenodd\" />'\n            },\n            onSubmit: async (data) => {\n                // Simuler l'envoi\n                await new Promise(resolve => setTimeout(resolve, 1500));\n                console.log('Newsletter signup:', data);\n            }\n        };\n\n        this.components.forms.set('signup', new FormComponent(signupConfig));\n        this.components.forms.get('signup').mount('#signupForm');\n\n        // Initialiser les animations et interactions sp√©cifiques\n        this.initHomeAnimations();\n    }\n\n    initContactPage() {\n        console.log('üìß Initialisation de la page contact');\n        \n        const contactConfig = {\n            id: 'contactForm',\n            className: 'contact-form',\n            fields: [\n                {\n                    type: 'text',\n                    id: 'name',\n                    name: 'name',\n                    label: 'Nom',\n                    required: true\n                },\n                {\n                    type: 'email',\n                    id: 'email',\n                    name: 'email',\n                    label: 'Email',\n                    required: true\n                },\n                {\n                    type: 'select',\n                    id: 'subject',\n                    name: 'subject',\n                    label: 'Sujet',\n                    placeholder: 'Choisissez un sujet',\n                    required: true,\n                    options: [\n                        { value: 'question', text: 'Question g√©n√©rale' },\n                        { value: 'suggestion', text: 'Suggestion d\\'am√©lioration' },\n                        { value: 'partenariat', text: 'Partenariat' },\n                        { value: 'probleme', text: 'Signaler un probl√®me' },\n                        { value: 'presse', text: 'Demande presse' },\n                        { value: 'autre', text: 'Autre' }\n                    ]\n                },\n                {\n                    type: 'textarea',\n                    id: 'message',\n                    name: 'message',\n                    label: 'Message',\n                    placeholder: 'D√©crivez votre demande...',\n                    rows: 6,\n                    required: true\n                }\n            ],\n            submitButton: {\n                text: 'Envoyer le message',\n                loadingText: 'Envoi en cours...',\n                successText: 'Message envoy√© !',\n                className: 'btn btn-primary',\n                icon: '<path d=\"M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z\"/><path d=\"M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z\"/>'\n            },\n            onSubmit: async (data) => {\n                // Simuler l'envoi\n                await new Promise(resolve => setTimeout(resolve, 2000));\n                console.log('Contact form submission:', data);\n            }\n        };\n\n        this.components.forms.set('contact', new FormComponent(contactConfig));\n        this.components.forms.get('contact').mount('#contactForm');\n    }\n\n    initFaqPage() {\n        console.log('‚ùì Initialisation de la page FAQ');\n        this.initFaqInteractions();\n    }\n\n    initHowItWorksPage() {\n        console.log('‚öôÔ∏è Initialisation de la page Comment √ßa marche');\n        this.initFlowCardHovers();\n    }\n\n    initAboutPage() {\n        console.log('‚ÑπÔ∏è Initialisation de la page √Ä propos');\n        this.initStatHovers();\n    }\n\n    initHomeAnimations() {\n        // Observer pour les animations d'entr√©e\n        const observerOptions = {\n            threshold: 0.1,\n            rootMargin: '0px 0px -50px 0px'\n        };\n\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    entry.target.classList.add('fade-in');\n                }\n            });\n        }, observerOptions);\n\n        // Observer les √©l√©ments animables\n        document.querySelectorAll('.feature-card, .process-step, .stat-item').forEach(el => {\n            observer.observe(el);\n        });\n    }\n\n    initFaqInteractions() {\n        document.querySelectorAll('.faq-item').forEach(item => {\n            item.addEventListener('click', () => {\n                item.style.transform = 'scale(1.02)';\n                setTimeout(() => {\n                    item.style.transform = 'scale(1)';\n                }, 200);\n            });\n        });\n    }\n\n    initFlowCardHovers() {\n        const flowCards = document.querySelectorAll('.flow-card');\n        flowCards.forEach(card => {\n            card.addEventListener('mouseenter', () => {\n                card.style.borderColor = 'rgba(102, 126, 234, 0.4)';\n            });\n            \n            card.addEventListener('mouseleave', () => {\n                card.style.borderColor = 'rgba(255, 255, 255, 0.08)';\n            });\n        });\n    }\n\n    initStatHovers() {\n        document.querySelectorAll('.stat-item').forEach(stat => {\n            stat.addEventListener('mouseenter', () => {\n                stat.style.transform = 'scale(1.05) translateY(-5px)';\n                stat.style.transition = 'all 0.3s ease';\n            });\n            \n            stat.addEventListener('mouseleave', () => {\n                stat.style.transform = 'scale(1) translateY(0)';\n            });\n        });\n    }\n\n    attachGlobalEventListeners() {\n        // Smooth scrolling pour les liens d'ancrage\n        document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n            anchor.addEventListener('click', (e) => {\n                e.preventDefault();\n                const target = document.querySelector(anchor.getAttribute('href'));\n                if (target) {\n                    target.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'start'\n                    });\n                }\n            });\n        });\n\n        // Gestion du focus clavier\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Tab') {\n                document.body.classList.add('keyboard-nav');\n            }\n        });\n\n        document.addEventListener('mousedown', () => {\n            document.body.classList.remove('keyboard-nav');\n        });\n\n        // Escape pour fermer les modales/overlays\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                const activeElement = document.activeElement;\n                if (activeElement && activeElement.blur) {\n                    activeElement.blur();\n                }\n            }\n        });\n    }\n}\n\n// Initialiser l'application quand le DOM est pr√™t\ndocument.addEventListener('DOMContentLoaded', () => {\n    new App();\n});\n\n// Performance monitoring\nif ('performance' in window) {\n    window.addEventListener('load', () => {\n        const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;\n        console.log(`‚ö° Page charg√©e en ${loadTime}ms`);\n    });\n}